package com.rules4j.engine;

public class RuleEngine {
	 private IRuleStore _pool;

     public RuleEngine(IRulesStore pool)
     {
         _pool = pool;
     }

     public IEnumerable<IRule> Evaluate(IDictionary<string, object> data)
     {
         return _pool.Get().Where(r => r.Filters.All(f => f.Evaluate(data)));
     }

     public IEnumerable<IRule> Evaluate(object data)
     {
         return this.Evaluate(ObjectHelper.ToDictionary(data));
     }


     public IEnumerable<IRule> EvaluateAndFire(object data)
     {
         var rules = this.Evaluate(data);
         FireRulesEvent(data, rules);
         return rules;
     }

     public IEnumerable<IRule> EvaluateAndFire(IDictionary<string, object> data)
     {
         var rules = this.Evaluate(data);
         FireRulesEvent(data, rules);
         return rules;
     }

     private void FireRulesEvent(object data, IEnumerable<IRule> rules)
     {
         foreach (var rule in rules)
         {
             var listener = ListenerRepository.GetListener(rule.Name);
             if (listener != null)
                 listener.Handle(data);
         }
     }
}
